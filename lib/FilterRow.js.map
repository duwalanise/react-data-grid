{"version":3,"file":"FilterRow.js","sourceRoot":"","sources":["../src/FilterRow.tsx"],"names":[],"mappings":";;;;;;;;;;;AAAA,OAAO,KAAK,EAAE,EAAE,aAAa,EAAE,MAAM,OAAO,CAAC;AAC7C,OAAO,UAAU,MAAM,YAAY,CAAC;AAkBpC,MAAM,CAAC,OAAO,UAAU,SAAS,CAAQ,EAQjB;QAPtB,kBAAM,EACN,gBAAK,EACL,oBAAO,EACP,gDAAqB,EACrB,0BAAU,EACV,oBAAO,EACP,oCAAe;IAEf,SAAS,QAAQ,CAAC,GAAW,EAAE,KAAc;QAC3C,IAAM,UAAU,gBAAiB,OAAO,CAAE,CAAC;QAC3C,UAAU,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QACxB,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAG,UAAU,EAAE;IAChC,CAAC;IAED,OAAO,CACL,6BACE,SAAS,EAAC,gBAAgB,EAC1B,KAAK,EAAE,EAAE,KAAK,OAAA,EAAE,MAAM,QAAA,EAAE,UAAU,EAAK,MAAM,OAAI,EAAE,IAElD,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM;QACT,IAAA,gBAAG,CAAY;QAEvB,IAAM,SAAS,GAAG,UAAU,CAAC,UAAU,EAAE;YACvC,iBAAiB,EAAE,MAAM,CAAC,MAAM;YAChC,sBAAsB,EAAE,MAAM,CAAC,GAAG,KAAK,qBAAqB;SAC7D,CAAC,CAAC;QACH,IAAM,KAAK,GAAwB;YACjC,KAAK,EAAE,MAAM,CAAC,KAAK;YACnB,IAAI,EAAE,MAAM,CAAC,IAAI;SAClB,CAAC;QAEF,IAAI,MAAM,CAAC,MAAM,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;YACnD,KAAK,CAAC,SAAS,GAAG,gBAAc,UAAU,QAAK,CAAC;SACjD;QAED,OAAO,CACL,6BACE,GAAG,EAAE,GAAG,EACR,KAAK,EAAE,KAAK,EACZ,SAAS,EAAE,SAAS,IAEnB,MAAM,CAAC,cAAc,IAAI,aAAa,CAAC,MAAM,CAAC,cAAc,EAAE;YAC7D,MAAM,QAAA;YACN,KAAK,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAG,MAAM,CAAC,GAAG,CAAC;YAC5B,QAAQ,EAAE,UAAA,KAAK,IAAI,OAAA,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,EAApB,CAAoB;SACxC,CAAC,CACE,CACP,CAAC;IACJ,CAAC,CAAC,CACE,CACP,CAAC;AACJ,CAAC","sourcesContent":["import React, { createElement } from 'react';\nimport classNames from 'classnames';\n\nimport { CalculatedColumn, Filters } from './common/types';\nimport { DataGridProps } from './DataGrid';\n\ntype SharedDataGridProps<R, SR> = Pick<DataGridProps<R, never, SR>,\n  | 'filters'\n  | 'onFiltersChange'\n>;\n\nexport interface FilterRowProps<R, SR> extends SharedDataGridProps<R, SR> {\n  height: number;\n  width: number;\n  lastFrozenColumnIndex: number;\n  columns: readonly CalculatedColumn<R, SR>[];\n  scrollLeft: number | undefined;\n}\n\nexport default function FilterRow<R, SR>({\n  height,\n  width,\n  columns,\n  lastFrozenColumnIndex,\n  scrollLeft,\n  filters,\n  onFiltersChange\n}: FilterRowProps<R, SR>) {\n  function onChange(key: string, value: unknown) {\n    const newFilters: Filters = { ...filters };\n    newFilters[key] = value;\n    onFiltersChange?.(newFilters);\n  }\n\n  return (\n    <div\n      className=\"rdg-header-row\"\n      style={{ width, height, lineHeight: `${height}px` }}\n    >\n      {columns.map(column => {\n        const { key } = column;\n\n        const className = classNames('rdg-cell', {\n          'rdg-cell-frozen': column.frozen,\n          'rdg-cell-frozen-last': column.idx === lastFrozenColumnIndex\n        });\n        const style: React.CSSProperties = {\n          width: column.width,\n          left: column.left\n        };\n\n        if (column.frozen && typeof scrollLeft === 'number') {\n          style.transform = `translateX(${scrollLeft}px)`;\n        }\n\n        return (\n          <div\n            key={key}\n            style={style}\n            className={className}\n          >\n            {column.filterRenderer && createElement(column.filterRenderer, {\n              column,\n              value: filters?.[column.key],\n              onChange: value => onChange(key, value)\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n"]}