{"version":3,"file":"RowRenderer.js","sourceRoot":"","sources":["../src/RowRenderer.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,OAAO,CAAC;AAEpC,OAAO,GAAG,MAAM,OAAO,CAAC;AACxB,OAAO,QAAQ,MAAM,YAAY,CAAC;AAwBlC,SAAS,WAAW,CAAQ,EAWD;IAVzB,IAAA,gCAAa,EACb,oCAAe,EACf,sBAAQ,EACR,kBAAM,EACN,YAAG,EACH,sCAAgB,EAChB,wBAAS,EACT,4BAAW,EACX,0BAAU,EACV,mJAAQ;IAEA,IAAA,2BAAU,CAAoB;IACtC,IAAM,aAAa,GAA4B;QAC7C,MAAM,QAAA;QACN,GAAG,KAAA;QACH,KAAK,EAAE,aAAa,CAAC,gBAAgB;QACrC,MAAM,EAAE,SAAS;QACjB,eAAe,iBAAA;QACf,aAAa,EAAE,KAAK,CAAC,aAAa;QAClC,qBAAqB,EAAE,aAAa,CAAC,qBAAqB;QAC1D,UAAU,YAAA;QACV,QAAQ,UAAA;QACR,UAAU,EAAE,KAAK,CAAC,UAAU;QAC5B,wBAAwB,EAAE,KAAK,CAAC,wBAAwB;KACzD,CAAC;IAEF,IAAI,UAAU,EAAE;QACd,IAAI,UAAU,CAAC,cAAc,EAAE;YAC7B,OAAO,UAAU,CAAC,cAAc,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;SACzD;QACD,IAAI,UAAU,CAAC,OAAO,EAAE;YACtB,OAAO,CACL,oBAAC,QAAQ,eACH,aAAa,EACb,UAAW,IACf,IAAI,EAAG,GAAe,CAAC,IAAK,EAC5B,QAAQ,EAAE,QAAQ,EAClB,QAAQ,EAAE,gBAAgB,EAC1B,iBAAiB,EAAE,KAAK,CAAC,iBAAiB,IAC1C,CACH,CAAC;SACH;KACF;IAED,OAAO,KAAK,CAAC,aAAa,CAA0B,WAAW,IAAI,GAAG,EAAE,aAAa,CAAC,CAAC;AACzF,CAAC;AAED,eAAe,IAAI,CAAC,WAAW,CAA4D,CAAC","sourcesContent":["import React, { memo } from 'react';\n\nimport Row from './Row';\nimport RowGroup from './RowGroup';\nimport { CanvasProps } from './Canvas';\nimport { RowRendererProps, RowData } from './common/types';\nimport EventBus from './EventBus';\n\ntype SharedCanvasProps<R, SR> = Pick<CanvasProps<R, never, SR>,\n  | 'columnMetrics'\n  | 'viewportColumns'\n  | 'rowGroupRenderer'\n  | 'rowHeight'\n  | 'rowRenderer'\n  | 'onRowClick'\n  | 'onRowExpandToggle'\n>;\n\ninterface IRowRendererProps<R, SR> extends SharedCanvasProps<R, SR> {\n  rowIdx: number;\n  row: R;\n  scrollLeft: number | undefined;\n  enableCellRangeSelection?: boolean;\n  eventBus: EventBus;\n  isRowSelected: boolean;\n}\n\nfunction RowRenderer<R, SR>({\n  columnMetrics,\n  viewportColumns,\n  eventBus,\n  rowIdx,\n  row,\n  rowGroupRenderer,\n  rowHeight,\n  rowRenderer,\n  scrollLeft,\n  ...props\n}: IRowRendererProps<R, SR>) {\n  const { __metaData } = row as RowData;\n  const rendererProps: RowRendererProps<R, SR> = {\n    rowIdx,\n    row,\n    width: columnMetrics.totalColumnWidth,\n    height: rowHeight,\n    viewportColumns,\n    isRowSelected: props.isRowSelected,\n    lastFrozenColumnIndex: columnMetrics.lastFrozenColumnIndex,\n    scrollLeft,\n    eventBus,\n    onRowClick: props.onRowClick,\n    enableCellRangeSelection: props.enableCellRangeSelection\n  };\n\n  if (__metaData) {\n    if (__metaData.getRowRenderer) {\n      return __metaData.getRowRenderer(rendererProps, rowIdx);\n    }\n    if (__metaData.isGroup) {\n      return (\n        <RowGroup<R, SR>\n          {...rendererProps}\n          {...__metaData!}\n          name={(row as RowData).name!}\n          eventBus={eventBus}\n          renderer={rowGroupRenderer}\n          onRowExpandToggle={props.onRowExpandToggle}\n        />\n      );\n    }\n  }\n\n  return React.createElement<RowRendererProps<R, SR>>(rowRenderer || Row, rendererProps);\n}\n\nexport default memo(RowRenderer) as <R, SR>(props: IRowRendererProps<R, SR>) => JSX.Element;\n"]}