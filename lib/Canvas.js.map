{"version":3,"file":"Canvas.js","sourceRoot":"","sources":["../src/Canvas.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useRef, useState, useImperativeHandle, useEffect, forwardRef } from 'react';\n\nimport { ColumnMetrics, Position, ScrollPosition, CalculatedColumn, SelectRowEvent } from './common/types';\nimport EventBus from './EventBus';\nimport InteractionMasks from './masks/InteractionMasks';\nimport { DataGridProps } from './DataGrid';\nimport RowRenderer from './RowRenderer';\nimport SummaryRow from './SummaryRow';\nimport { getColumnScrollPosition, getScrollbarSize, isPositionStickySupported, getVerticalRangeToRender, assertIsValidKey } from './utils';\n\ntype SharedDataGridProps<R, K extends keyof R, SR> = Pick<DataGridProps<R, K, SR>,\n  | 'rows'\n  | 'rowRenderer'\n  | 'rowGroupRenderer'\n  | 'selectedRows'\n  | 'summaryRows'\n  | 'onCheckCellIsEditable'\n  | 'onSelectedCellChange'\n  | 'onSelectedCellRangeChange'\n  | 'onRowClick'\n  | 'onRowExpandToggle'\n  | 'onSelectedRowsChange'\n  | 'rowKey'\n> & Required<Pick<DataGridProps<R, K, SR>,\n  | 'enableCellAutoFocus'\n  | 'enableCellCopyPaste'\n  | 'enableCellDragAndDrop'\n  | 'rowHeight'\n  | 'cellNavigationMode'\n  | 'editorPortalTarget'\n  | 'onRowsUpdate'\n>>;\n\nexport interface CanvasProps<R, K extends keyof R, SR> extends SharedDataGridProps<R, K, SR> {\n  columnMetrics: ColumnMetrics<R, SR>;\n  viewportColumns: readonly CalculatedColumn<R, SR>[];\n  height: number;\n  scrollLeft: number;\n  onScroll: (position: ScrollPosition) => void;\n}\n\nexport interface CanvasHandle {\n  scrollToColumn: (colIdx: number) => void;\n  scrollToRow: (rowIdx: number) => void;\n  selectCell: (position: Position, openEditor?: boolean) => void;\n  openCellEditor: (rowIdx: number, colIdx: number) => void;\n}\n\nfunction Canvas<R, K extends keyof R, SR>({\n  columnMetrics,\n  viewportColumns,\n  height,\n  scrollLeft,\n  onScroll,\n  rows,\n  rowHeight,\n  rowKey,\n  summaryRows,\n  selectedRows,\n  onSelectedRowsChange,\n  ...props\n}: CanvasProps<R, K, SR>, ref: React.Ref<CanvasHandle>) {\n  const [eventBus] = useState(() => new EventBus());\n  const [scrollTop, setScrollTop] = useState(0);\n  const canvasRef = useRef<HTMLDivElement>(null);\n  const summaryRef = useRef<HTMLDivElement>(null);\n  const lastSelectedRowIdx = useRef(-1);\n\n  const clientHeight = getClientHeight();\n  const nonStickyScrollLeft = isPositionStickySupported() ? undefined : scrollLeft;\n  const { columns, lastFrozenColumnIndex } = columnMetrics;\n\n  const [rowOverscanStartIdx, rowOverscanEndIdx] = getVerticalRangeToRender(\n    clientHeight,\n    rowHeight,\n    scrollTop,\n    rows.length\n  );\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollLeft, scrollTop } = e.currentTarget;\n    setScrollTop(scrollTop);\n    onScroll({ scrollLeft, scrollTop });\n    if (summaryRef.current) {\n      summaryRef.current.scrollLeft = scrollLeft;\n    }\n  }\n\n  function getClientHeight() {\n    const scrollbarSize = columnMetrics.totalColumnWidth > columnMetrics.viewportWidth ? getScrollbarSize() : 0;\n    return height - scrollbarSize;\n  }\n\n  function getFrozenColumnsWidth() {\n    if (lastFrozenColumnIndex === -1) return 0;\n    const lastFrozenCol = columns[lastFrozenColumnIndex];\n    return lastFrozenCol.left + lastFrozenCol.width;\n  }\n\n  function scrollToCell({ idx, rowIdx }: Partial<Position>) {\n    const { current } = canvasRef;\n    if (!current) return;\n\n    const { clientWidth, clientHeight, scrollLeft, scrollTop } = current;\n\n    if (typeof idx === 'number' && idx > lastFrozenColumnIndex) {\n      const { left, width } = columns[idx];\n      const isCellAtLeftBoundary = left < scrollLeft + width + getFrozenColumnsWidth();\n      const isCellAtRightBoundary = left + width > clientWidth + scrollLeft;\n      if (isCellAtLeftBoundary || isCellAtRightBoundary) {\n        const newScrollLeft = getColumnScrollPosition(columns, idx, scrollLeft, clientWidth);\n        current.scrollLeft = scrollLeft + newScrollLeft;\n      }\n    }\n\n    if (typeof rowIdx === 'number') {\n      if (rowIdx * rowHeight < scrollTop) {\n        // at top boundary, scroll to the row's top\n        current.scrollTop = rowIdx * rowHeight;\n      } else if ((rowIdx + 1) * rowHeight > scrollTop + clientHeight) {\n        // at bottom boundary, scroll the next row's top to the bottom of the viewport\n        current.scrollTop = (rowIdx + 1) * rowHeight - clientHeight;\n      }\n    }\n  }\n\n  function scrollToColumn(idx: number) {\n    scrollToCell({ idx });\n  }\n\n  function scrollToRow(rowIdx: number) {\n    const { current } = canvasRef;\n    if (!current) return;\n    current.scrollTop = rowIdx * rowHeight;\n  }\n\n  function selectCell(position: Position, openEditor?: boolean) {\n    eventBus.dispatch('SELECT_CELL', position, openEditor);\n  }\n\n  function openCellEditor(rowIdx: number, idx: number) {\n    selectCell({ rowIdx, idx }, true);\n  }\n\n  useEffect(() => {\n    if (!onSelectedRowsChange) return;\n\n    const handleRowSelectionChange = ({ rowIdx, checked, isShiftClick }: SelectRowEvent) => {\n      assertIsValidKey(rowKey);\n      const newSelectedRows = new Set(selectedRows);\n      const rowId = rows[rowIdx][rowKey];\n\n      if (checked) {\n        newSelectedRows.add(rowId);\n        const previousRowIdx = lastSelectedRowIdx.current;\n        lastSelectedRowIdx.current = rowIdx;\n        if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n          const step = Math.sign(rowIdx - previousRowIdx);\n          for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n            newSelectedRows.add(rows[i][rowKey]);\n          }\n        }\n      } else {\n        newSelectedRows.delete(rowId);\n        lastSelectedRowIdx.current = -1;\n      }\n\n      onSelectedRowsChange(newSelectedRows);\n    };\n\n    return eventBus.subscribe('SELECT_ROW', handleRowSelectionChange);\n  }, [eventBus, onSelectedRowsChange, rows, rowKey, selectedRows]);\n\n  useImperativeHandle(ref, () => ({\n    scrollToColumn,\n    scrollToRow,\n    selectCell,\n    openCellEditor\n  }));\n\n  function getViewportRows() {\n    const rowElements = [];\n    for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n      const row = rows[rowIdx];\n      let key: string | number = rowIdx;\n      let isRowSelected = false;\n      if (rowKey !== undefined) {\n        const rowId = row[rowKey];\n        isRowSelected = selectedRows?.has(rowId) ?? false;\n        if (typeof rowId === 'string' || typeof rowId === 'number') {\n          key = rowId;\n        }\n      }\n\n      rowElements.push(\n        <RowRenderer<R, SR>\n          key={key}\n          rowIdx={rowIdx}\n          row={row}\n          columnMetrics={columnMetrics}\n          viewportColumns={viewportColumns}\n          eventBus={eventBus}\n          rowGroupRenderer={props.rowGroupRenderer}\n          rowHeight={rowHeight}\n          rowRenderer={props.rowRenderer}\n          scrollLeft={nonStickyScrollLeft}\n          isRowSelected={isRowSelected}\n          onRowClick={props.onRowClick}\n          onRowExpandToggle={props.onRowExpandToggle}\n          enableCellRangeSelection={typeof props.onSelectedCellRangeChange === 'function'}\n        />\n      );\n    }\n\n    return rowElements;\n  }\n\n  const summary = summaryRows && summaryRows.length > 0 && (\n    <div ref={summaryRef} className=\"rdg-summary\">\n      {summaryRows.map((row, rowIdx) => (\n        <SummaryRow<R, SR>\n          key={rowIdx}\n          rowIdx={rowIdx}\n          row={row}\n          width={columnMetrics.totalColumnWidth + getScrollbarSize()}\n          height={rowHeight}\n          viewportColumns={viewportColumns}\n          lastFrozenColumnIndex={columnMetrics.lastFrozenColumnIndex}\n          scrollLeft={nonStickyScrollLeft}\n        />\n      ))}\n    </div>\n  );\n\n  return (\n    <>\n      <div\n        className=\"rdg-viewport\"\n        style={{ height: height - 2 - (summaryRows ? summaryRows.length * rowHeight + 2 : 0) }}\n        ref={canvasRef}\n        onScroll={handleScroll}\n      >\n        <InteractionMasks<R, SR>\n          rows={rows}\n          rowHeight={rowHeight}\n          columns={columns}\n          height={clientHeight}\n          enableCellAutoFocus={props.enableCellAutoFocus}\n          enableCellCopyPaste={props.enableCellCopyPaste}\n          enableCellDragAndDrop={props.enableCellDragAndDrop}\n          cellNavigationMode={props.cellNavigationMode}\n          eventBus={eventBus}\n          canvasRef={canvasRef}\n          scrollLeft={scrollLeft}\n          scrollTop={scrollTop}\n          scrollToCell={scrollToCell}\n          editorPortalTarget={props.editorPortalTarget}\n          onCheckCellIsEditable={props.onCheckCellIsEditable}\n          onRowsUpdate={props.onRowsUpdate}\n          onSelectedCellChange={props.onSelectedCellChange}\n          onSelectedCellRangeChange={props.onSelectedCellRangeChange}\n        />\n        <div\n          className=\"rdg-grid\"\n          style={{\n            width: columnMetrics.totalColumnWidth,\n            paddingTop: rowOverscanStartIdx * rowHeight,\n            paddingBottom: (rows.length - 1 - rowOverscanEndIdx) * rowHeight\n          }}\n        >\n          {getViewportRows()}\n        </div>\n      </div>\n      {summary}\n    </>\n  );\n}\n\nexport default forwardRef(\n  Canvas as React.RefForwardingComponent<CanvasHandle>\n) as <R, K extends keyof R, SR>(props: CanvasProps<R, K, SR> & { ref?: React.Ref<CanvasHandle> }) => JSX.Element;\n"]}