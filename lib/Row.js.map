{"version":3,"file":"Row.js","sourceRoot":"","sources":["../src/Row.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,UAAU,MAAM,YAAY,CAAC;AACpC,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,IAAI,MAAM,QAAQ,CAAC;AAE1B,OAAO,EAAE,cAAc,EAAE,SAAS,EAAE,MAAM,SAAS,CAAC;AAEpD,MAAM,CAAC,OAAO,UAAU,GAAG,CAAkB,EAkBnB;IAjBxB,IAAA,oBAAiC,EAAjC,wCAAiC,EACjC,wBAAS,EACT,sDAAwB,EACxB,sBAAQ,EACR,kBAAM,EACN,kBAAM,EACN,gCAAa,EACb,gDAAqB,EACrB,0BAAU,EACV,YAAG,EACH,0BAAU,EACV,oCAAe,EACf,gBAAK,EACL,4BAAW,EACX,0BAAU,EACV,kBAAM,EACN,6PAAQ;IAER,SAAS,eAAe,CAAC,KAAsC;QAC7D,gCAAgC;QAChC,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,QAAQ,CAAC,QAAQ,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;IAC1C,CAAC;IAED,SAAS,cAAc,CAAC,KAAsC;QAC5D,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,KAAK,CAAC,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC;IACzC,CAAC;IAED,SAAS,QAAQ;QACf,OAAO,eAAe,CAAC,GAAG,CAAC,UAAA,MAAM;YAC/B,OAAO,CACL,oBAAC,YAAY,IACX,GAAG,EAAE,MAAM,CAAC,GAAG,EACf,MAAM,EAAE,MAAM,EACd,MAAM,EAAE,MAAM,EACd,qBAAqB,EAAE,qBAAqB,EAC5C,GAAG,EAAE,GAAG,EACR,UAAU,EAAE,MAAM,CAAC,MAAM,IAAI,OAAO,UAAU,KAAK,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,EACpF,aAAa,EAAE,aAAa,EAC5B,QAAQ,EAAE,QAAQ,EAClB,UAAU,EAAE,UAAU,EACtB,wBAAwB,EAAE,wBAAwB,GAClD,CACH,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED,SAAS,GAAG,UAAU,CACpB,SAAS,EACT,cAAW,MAAM,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAE,EAC9C,EAAE,kBAAkB,EAAE,aAAa,EAAE,EACrC,SAAS,CACV,CAAC;IAEF,sFAAsF;IACtF,sEAAsE;IACtE,iEAAiE;IACjE,OAAO,CACL,sCACE,SAAS,EAAE,SAAS,EACpB,KAAK,EAAE,EAAE,KAAK,OAAA,EAAE,MAAM,QAAA,EAAE,EACxB,WAAW,EAAE,SAAS,CAAC,eAAe,EAAE,WAAW,CAAC,EACpD,UAAU,EAAE,SAAS,CAAC,cAAc,EAAE,UAAU,CAAC,EACjD,MAAM,EAAE,SAAS,CAAC,cAAc,EAAE,MAAM,CAAC,IACrC,KAAK,GAER,QAAQ,EAAE,CACP,CACP,CAAC;AACJ,CAAC","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\n\nimport Cell from './Cell';\nimport { RowRendererProps } from './common/types';\nimport { preventDefault, wrapEvent } from './utils';\n\nexport default function Row<R, SR = unknown>({\n  cellRenderer: CellRenderer = Cell,\n  className,\n  enableCellRangeSelection,\n  eventBus,\n  height,\n  rowIdx,\n  isRowSelected,\n  lastFrozenColumnIndex,\n  onRowClick,\n  row,\n  scrollLeft,\n  viewportColumns,\n  width,\n  onDragEnter,\n  onDragOver,\n  onDrop,\n  ...props\n}: RowRendererProps<R, SR>) {\n  function handleDragEnter(event: React.DragEvent<HTMLDivElement>) {\n    // Prevent default to allow drop\n    event.preventDefault();\n    eventBus.dispatch('DRAG_ENTER', rowIdx);\n  }\n\n  function handleDragOver(event: React.DragEvent<HTMLDivElement>) {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'copy';\n  }\n\n  function getCells() {\n    return viewportColumns.map(column => {\n      return (\n        <CellRenderer\n          key={column.key}\n          rowIdx={rowIdx}\n          column={column}\n          lastFrozenColumnIndex={lastFrozenColumnIndex}\n          row={row}\n          scrollLeft={column.frozen && typeof scrollLeft === 'number' ? scrollLeft : undefined}\n          isRowSelected={isRowSelected}\n          eventBus={eventBus}\n          onRowClick={onRowClick}\n          enableCellRangeSelection={enableCellRangeSelection}\n        />\n      );\n    });\n  }\n\n  className = classNames(\n    'rdg-row',\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    { 'rdg-row-selected': isRowSelected },\n    className\n  );\n\n  // Regarding onDrop: the default in Firefox is to treat data in dataTransfer as a URL,\n  // and perform navigation on it, even if the data type used is 'text'.\n  // To bypass this, we need to capture and prevent the drop event.\n  return (\n    <div\n      className={className}\n      style={{ width, height }}\n      onDragEnter={wrapEvent(handleDragEnter, onDragEnter)}\n      onDragOver={wrapEvent(handleDragOver, onDragOver)}\n      onDrop={wrapEvent(preventDefault, onDrop)}\n      {...props}\n    >\n      {getCells()}\n    </div>\n  );\n}\n"]}