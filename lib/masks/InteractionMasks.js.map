{"version":3,"file":"InteractionMasks.js","sourceRoot":"","sources":["../../src/masks/InteractionMasks.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE,WAAW,EAAE,MAAM,OAAO,CAAC;AAExE,aAAa;AACb,OAAO,QAAQ,MAAM,YAAY,CAAC;AAClC,OAAO,QAA6B,MAAM,YAAY,CAAC;AACvD,OAAO,eAAe,MAAM,4BAA4B,CAAC;AACzD,OAAO,YAAY,MAAM,yBAAyB,CAAC;AACnD,OAAO,EAAE,eAAe,EAAE,MAAM,8BAA8B,CAAC;AAE/D,QAAQ;AACR,OAAO,EACL,iBAAiB,EACjB,qBAAqB,IAAI,aAAa,EACtC,2BAA2B,EAC3B,WAAW,EACX,sBAAsB,EACvB,MAAM,UAAU,CAAC;AAIlB,OAAO,EAAE,aAAa,EAAE,kBAAkB,EAAE,MAAM,iBAAiB,CAAC;AAoCpE,MAAM,CAAC,OAAO,UAAU,gBAAgB,CAAQ,EAiBjB;QAhB7B,oBAAO,EACP,cAAI,EACJ,wBAAS,EACT,sBAAQ,EACR,4CAAmB,EACnB,4CAAmB,EACnB,gDAAqB,EACrB,0CAAkB,EAClB,0CAAkB,EAClB,wBAAS,EACT,0BAAU,EACV,wBAAS,EACT,8CAAoB,EACpB,gDAAqB,EACrB,8BAAY,EACZ,8BAAY;IAEN,IAAA;;;;;UAKJ,EALK,wBAAgB,EAAE,2BAKvB,CAAC;IACG,IAAA,8BAA0F,EAAzF,sBAAc,EAAE,yBAAyE,CAAC;IAC3F,IAAA,8BAA8E,EAA7E,uBAAe,EAAE,0BAA4D,CAAC;IACrF,IAAM,gBAAgB,GAAG,MAAM,CAAiB,IAAI,CAAC,CAAC;IAEtD,4FAA4F;IAC5F,SAAS,CAAC;;QACR,IAAI,gBAAgB,CAAC,MAAM,KAAK,CAAC,CAAC,IAAI,gBAAgB,CAAC,GAAG,KAAK,CAAC,CAAC,IAAI,gBAAgB,CAAC,MAAM,KAAK,MAAM;YAAE,OAAO;QAChH,MAAA,gBAAgB,CAAC,OAAO,0CAAE,KAAK,GAAG;IACpC,CAAC,EAAE,CAAC,gBAAgB,CAAC,CAAC,CAAC;IAEvB,SAAS,CAAC;QACR,OAAO,QAAQ,CAAC,SAAS,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC;QACR,IAAI,eAAe,KAAK,IAAI;YAAE,OAAO;QACrC,IAAM,eAAe,GAAG,UAAC,UAAkB;YACzC,kBAAkB,uBAAM,eAAe,KAAE,UAAU,YAAA,IAAG,CAAC;QACzD,CAAC,CAAC;QACF,OAAO,QAAQ,CAAC,SAAS,CAAC,YAAY,EAAE,eAAe,CAAC,CAAC;IAC3D,CAAC,EAAE,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC,CAAC;IAEhC,IAAM,WAAW,GAAG,WAAW,CAAC;QAC9B,mBAAmB,CAAC,UAAC,EAAe;gBAAb,YAAG,EAAE,kBAAM;YAAO,OAAA,CAAC,EAAE,GAAG,KAAA,EAAE,MAAM,QAAA,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC;QAAnC,CAAmC,CAAC,CAAC;IAChF,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,+GAA+G;IAC/G,IAAI,gBAAgB,CAAC,GAAG,GAAG,OAAO,CAAC,MAAM,IAAI,gBAAgB,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE;QAClF,mBAAmB,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC;QAC/D,iBAAiB,CAAC,IAAI,CAAC,CAAC;QACxB,kBAAkB,CAAC,IAAI,CAAC,CAAC;KAC1B;IAED,SAAS,iBAAiB;QACxB,IAAI,CAAC,SAAS,CAAC,OAAO;YAAE,OAAO,IAAI,CAAC;QAC9B,IAAA,8CAAyD,EAAvD,cAAI,EAAE,YAAiD,CAAC;QAC1D,IAAA,0DAAkG,EAAhG,qBAAiB,EAAE,uBAA6E,CAAC;QACzG,IAAM,MAAM,GAAG,OAAO,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;QAC7C,OAAO;YACL,IAAI,EAAE,IAAI,GAAG,OAAO,GAAG,MAAM,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;YACrE,GAAG,EAAE,GAAG,GAAG,MAAM,GAAG,gBAAgB,CAAC,MAAM,GAAG,SAAS,GAAG,SAAS;SACpE,CAAC;IACJ,CAAC;IAED,SAAS,eAAe,CAAC,GAAW,EAAE,IAAyB,EAAE,QAAgB;QAA3C,qBAAA,EAAA,yBAAyB;QAAE,yBAAA,EAAA,gBAAgB;QACvE,IAAA,0BAAG,EAAE,gCAAM,CAAsB;QACzC,IAAI,YAAsB,CAAC;QAC3B,QAAQ,GAAG,EAAE;YACX,KAAK,SAAS;gBACZ,YAAY,GAAG,EAAE,GAAG,KAAA,EAAE,MAAM,EAAE,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC3C,MAAM;YACR,KAAK,WAAW;gBACd,YAAY,GAAG,EAAE,GAAG,KAAA,EAAE,MAAM,EAAE,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC3C,MAAM;YACR,KAAK,WAAW;gBACd,YAAY,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,EAAE,MAAM,QAAA,EAAE,CAAC;gBACxC,MAAM;YACR,KAAK,YAAY;gBACf,YAAY,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,EAAE,MAAM,QAAA,EAAE,CAAC;gBACxC,MAAM;YACR,KAAK,KAAK;gBACR,YAAY,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,QAAA,EAAE,CAAC;gBAC1D,MAAM;YACR;gBACE,YAAY,GAAG,EAAE,GAAG,KAAA,EAAE,MAAM,QAAA,EAAE,CAAC;gBAC/B,MAAM;SACT;QAED,OAAO,2BAA2B,CAAQ;YACxC,OAAO,SAAA;YACP,SAAS,EAAE,IAAI,CAAC,MAAM;YACtB,kBAAkB,EAAE,IAAI;YACxB,YAAY,cAAA;SACb,CAAC,CAAC;IACL,CAAC;IAED,SAAS,SAAS,CAAC,KAA0C;;QAC3D,IAAM,MAAM,GAAG,OAAO,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;QAC7C,IAAM,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;QAC1C,IAAM,iBAAiB,GAAG,OAAC,MAAM,CAAC,kBAAkB,mCAAI,eAAe,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,KAAK,IAAI,CAAC;QAEtF,IAAA,eAAG,CAAW;QACtB,IAAI,mBAAmB,IAAI,iBAAiB,CAAC,KAAK,CAAC,EAAE;YACnD,wCAAwC;YACxC,IAAM,YAAY,GAAG,KAAK,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;YAC7C,IAAI,YAAY,KAAK,GAAG;gBAAE,OAAO,UAAU,EAAE,CAAC;YAC9C,IAAI,YAAY,KAAK,GAAG;gBAAE,OAAO,WAAW,EAAE,CAAC;SAChD;QAED,IAAM,aAAa,GAAG,gBAAgB,CAAC,MAAM,KAAK,QAAQ,IAAI,cAAc,CAAC,gBAAgB,CAAC,CAAC;QAE/F,QAAQ,GAAG,EAAE;YACX,KAAK,OAAO;gBACV,IAAI,aAAa,EAAE;oBACjB,mBAAmB,CAAC,UAAC,EAAe;4BAAb,YAAG,EAAE,kBAAM;wBAAO,OAAA,CAAC,EAAE,GAAG,KAAA,EAAE,MAAM,QAAA,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC;oBAA/C,CAA+C,CAAC,CAAC;iBAC3F;qBAAM,IAAI,gBAAgB,CAAC,MAAM,KAAK,MAAM,EAAE;oBAC7C,mBAAmB,CAAC,UAAC,EAAe;4BAAb,YAAG,EAAE,kBAAM;wBAAO,OAAA,CAAC,EAAE,GAAG,KAAA,EAAE,MAAM,QAAA,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC;oBAAnC,CAAmC,CAAC,CAAC;iBAC/E;gBACD,MAAM;YACR,KAAK,QAAQ;gBACX,WAAW,EAAE,CAAC;gBACd,iBAAiB,CAAC,IAAI,CAAC,CAAC;gBACxB,MAAM;YACR,KAAK,KAAK;gBACR,UAAU,CAAC,KAAK,CAAC,CAAC;gBAClB,MAAM;YACR,KAAK,SAAS,CAAC;YACf,KAAK,WAAW,CAAC;YACjB,KAAK,WAAW,CAAC;YACjB,KAAK,YAAY;gBACf,KAAK,CAAC,cAAc,EAAE,CAAC;gBACvB,UAAU,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC;gBACjC,MAAM;YACR;gBACE,IAAI,aAAa,IAAI,iBAAiB,EAAE;oBACtC,mBAAmB,CAAC,UAAC,EAAe;4BAAb,YAAG,EAAE,kBAAM;wBAAO,OAAA,CAAC,EAAE,GAAG,KAAA,EAAE,MAAM,QAAA,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,KAAA,EAAE,CAAC;oBAAtC,CAAsC,CAAC,CAAC;iBAClF;gBACD,MAAM;SACT;IACH,CAAC;IAED,SAAS,UAAU,CAAC,CAAsC;QACxD,gFAAgF;QAChF,IAAI,WAAW,CAAC,CAAC,EAAE,EAAE,kBAAkB,oBAAA,EAAE,OAAO,SAAA,EAAE,SAAS,EAAE,IAAI,CAAC,MAAM,EAAE,gBAAgB,kBAAA,EAAE,CAAC,EAAE;YAC7F,IAAI,gBAAgB,CAAC,MAAM,KAAK,MAAM,EAAE;gBACtC,WAAW,EAAE,CAAC;gBACd,OAAO;aACR;YAED,6CAA6C;YAC7C,mBAAmB,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC;YAC/D,OAAO;SACR;QAED,CAAC,CAAC,cAAc,EAAE,CAAC;QACnB,IAAM,qBAAqB,GAAG,kBAAkB,KAAK,kBAAkB,CAAC,IAAI;YAC1E,CAAC,CAAC,kBAAkB,CAAC,UAAU;YAC/B,CAAC,CAAC,kBAAkB,CAAC;QACvB,IAAM,YAAY,GAAG,eAAe,CAAC,KAAK,EAAE,qBAAqB,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC;QAC/E,UAAU,CAAC,YAAY,CAAC,CAAC;IAC3B,CAAC;IAED,SAAS,UAAU;QACT,IAAA,0BAAG,EAAE,gCAAM,CAAsB;QACzC,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAc,CAAC,CAAC;QACxD,iBAAiB,CAAC,EAAE,GAAG,KAAA,EAAE,MAAM,QAAA,EAAE,KAAK,OAAA,EAAE,CAAC,CAAC;IAC5C,CAAC;IAED,SAAS,WAAW;;QAClB,IAAI,cAAc,KAAK,IAAI,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,EAAE;YAChE,OAAO;SACR;QAEO,IAAA,+BAAa,CAAsB;QAE3C,IAAM,OAAO,GAAG,OAAO,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;QAC1C,IAAA,+BAAe,EAAE,wBAAG,EAAE,4BAAK,CAAoB;QACvD,IAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;QAErC,YAAY,CAAC;YACX,OAAO,SAAA;YACP,OAAO,SAAA;YACP,KAAK,OAAA;YACL,OAAO,EAAE,CAAA,SAAE,GAAC,OAAO,IAAG,KAAK,IAAW,CAAA;YACtC,MAAM,EAAE,aAAa,CAAC,UAAU;YAChC,WAAW,aAAA;SACZ,CAAC,CAAC;IACL,CAAC;IAED,SAAS,kBAAkB,CAAC,EAAyB;YAAvB,YAAG,EAAE,kBAAM;QACvC,OAAO,MAAM,IAAI,CAAC,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC;IACjF,CAAC;IAED,SAAS,cAAc,CAAC,QAAkB;QACxC,OAAO,kBAAkB,CAAC,QAAQ,CAAC;eAC9B,sBAAsB,CAAQ,EAAE,OAAO,SAAA,EAAE,IAAI,MAAA,EAAE,gBAAgB,EAAE,QAAQ,EAAE,qBAAqB,uBAAA,EAAE,CAAC,CAAC;IAC3G,CAAC;IAED,SAAS,UAAU,CAAC,QAAkB,EAAE,YAAoB;QAApB,6BAAA,EAAA,oBAAoB;QAC1D,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC;YAAE,OAAO;QAE1C,IAAI,YAAY,IAAI,cAAc,CAAC,QAAQ,CAAC,EAAE;YAC5C,mBAAmB,uBAAM,QAAQ,KAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,IAAG,CAAC;SACjE;aAAM;YACL,mBAAmB,uBAAM,QAAQ,KAAE,MAAM,EAAE,QAAQ,IAAG,CAAC;SACxD;QACD,YAAY,CAAC,QAAQ,CAAC,CAAC;QACvB,oBAAoB,aAApB,oBAAoB,uBAApB,oBAAoB,cAAQ,QAAQ,GAAI;IAC1C,CAAC;IAED,SAAS,aAAa;QACpB,OAAO,qBAAqB,IAAI,cAAc,CAAC,gBAAgB,CAAC,CAAC;IACnE,CAAC;IAED,SAAS,eAAe,CAAC,CAAkC;QACzD,CAAC,CAAC,YAAY,CAAC,aAAa,GAAG,MAAM,CAAC;QACtC,8DAA8D;QAC9D,IAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;QACtD,IAAI;YACF,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;SACpD;QAAC,OAAO,EAAE,EAAE;YACX,4DAA4D;YAC5D,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;SAC9C;QACD,kBAAkB,uBAAM,gBAAgB,KAAE,UAAU,EAAE,gBAAgB,CAAC,MAAM,IAAG,CAAC;IACnF,CAAC;IAED,SAAS,aAAa;;QACpB,IAAI,eAAe,KAAK,IAAI;YAAE,OAAO;QAE7B,IAAA,+BAAM,EAAE,uCAAU,CAAqB;QAC/C,IAAM,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QAC5C,IAAM,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC;QAC3B,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,OAAkB,CAAC,CAAC;QAE/C,YAAY,CAAC;YACX,OAAO,SAAA;YACP,OAAO,EAAE,MAAM;YACf,KAAK,EAAE,UAAU;YACjB,OAAO,EAAE,CAAA,SAAE,GAAC,OAAO,IAAG,KAAK,IAAW,CAAA;YACtC,MAAM,EAAE,aAAa,CAAC,SAAS;SAChC,CAAC,CAAC;QAEH,kBAAkB,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAED,SAAS,uBAAuB;;QAC9B,IAAM,MAAM,GAAG,OAAO,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;QAC7C,IAAM,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC;QAC3B,IAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,OAAkB,CAAC,CAAC;QAEhE,YAAY,CAAC;YACX,OAAO,SAAA;YACP,OAAO,EAAE,gBAAgB,CAAC,MAAM;YAChC,KAAK,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC;YACtB,OAAO,EAAE,CAAA,SAAE,GAAC,OAAO,IAAG,KAAK,IAAW,CAAA;YACtC,MAAM,EAAE,aAAa,CAAC,WAAW;SAClC,CAAC,CAAC;IACL,CAAC;IAED,SAAS,QAAQ,CAAC,EAAyC;YAAvC,oBAAO,EAAE,kBAAM,EAAE,oBAAO;QAC1C,YAAY,CAAC;YACX,OAAO,SAAA;YACP,OAAO,EAAE,MAAM;YACf,KAAK,EAAE,MAAM;YACb,OAAO,SAAA;YACP,MAAM,EAAE,aAAa,CAAC,WAAW;SAClC,CAAC,CAAC;QACH,WAAW,EAAE,CAAC;IAChB,CAAC;IAED,SAAS,qBAAqB,CAAC,gBAA0B;QACvD,IAAM,GAAG,GAAG,SAAS,GAAG,gBAAgB,CAAC,MAAM,CAAC;QAChD,IAAM,SAAS,GAAG,aAAa,CAAC,EAAE,gBAAgB,kBAAA,EAAE,OAAO,SAAA,EAAE,UAAU,YAAA,EAAE,SAAS,WAAA,EAAE,CAAC,CAAC;QACtF,SAAS,CAAC,GAAG,GAAG,GAAG,CAAC;QACpB,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,OAAO,CACL,6BAAK,SAAS,EAAE,SAAS;QACtB,cAAc,IAAI,kBAAkB,CAAC,cAAc,CAAC,IAAI,CACvD,oBAAC,QAAQ,aACP,SAAS,EAAC,iBAAiB,IACvB,qBAAqB,CAAC,cAAc,CAAC,EACzC,CACH;QACA,eAAe,IAAI,kBAAkB,CAAC,eAAe,CAAC,IAAI,CACzD,oBAAC,QAAQ,IACP,eAAe,EAAE,eAAe,EAChC,qBAAqB,EAAE,qBAAqB,GAC5C,CACH;QACA,gBAAgB,CAAC,MAAM,KAAK,QAAQ,IAAI,kBAAkB,CAAC,gBAAgB,CAAC,IAAI,CAC/E,oBAAC,QAAQ,aACP,SAAS,EAAC,cAAc,EACxB,QAAQ,EAAE,CAAC,EACX,GAAG,EAAE,gBAAgB,IACjB,qBAAqB,CAAC,gBAAgB,CAAC,GAE1C,aAAa,EAAE,IAAI,CAClB,6BACE,SAAS,EAAC,aAAa,EACvB,SAAS,QACT,WAAW,EAAE,eAAe,EAC5B,SAAS,EAAE,aAAa,EACxB,aAAa,EAAE,uBAAuB,GACtC,CACH,CACQ,CACZ;QACA,gBAAgB,CAAC,MAAM,KAAK,MAAM,IAAI,kBAAkB,CAAC,gBAAgB,CAAC,IAAI,CAC7E,oBAAC,YAAY,IAAC,MAAM,EAAE,kBAAkB;YACtC,oBAAC,eAAe,aACd,mBAAmB,EAAE,gBAAgB,CAAC,GAAG,EACzC,QAAQ,EAAE,QAAQ,EAClB,cAAc,EAAE,WAAW,EAC3B,MAAM,EAAE,gBAAgB,CAAC,MAAM,EAC/B,GAAG,EAAE,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAClC,MAAM,EAAE,OAAO,CAAC,gBAAgB,CAAC,GAAG,CAAC,EACrC,UAAU,EAAE,UAAU,EACtB,SAAS,EAAE,SAAS,IAChB,qBAAqB,CAAC,gBAAgB,CAAC,EACvC,iBAAiB,EAAE,EACvB,CACW,CAChB,CACG,CACP,CAAC;AACJ,CAAC","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\n\n// Components\nimport CellMask from './CellMask';\nimport DragMask, { DraggedPosition } from './DragMask';\nimport EditorContainer from '../editors/EditorContainer';\nimport EditorPortal from '../editors/EditorPortal';\nimport { legacyCellInput } from '../editors/CellInputHandlers';\n\n// Utils\nimport {\n  isCtrlKeyHeldDown,\n  getSelectedDimensions as getDimensions,\n  getNextSelectedCellPosition,\n  canExitGrid,\n  isSelectedCellEditable\n} from '../utils';\n\n// Types\nimport EventBus from '../EventBus';\nimport { UpdateActions, CellNavigationMode } from '../common/enums';\nimport { Position, Dimension, CommitEvent, ColumnMetrics } from '../common/types';\nimport { CanvasProps } from '../Canvas';\n\ntype SharedCanvasProps<R, SR> = Pick<CanvasProps<R, never, SR>,\n  | 'rows'\n  | 'rowHeight'\n  | 'enableCellAutoFocus'\n  | 'enableCellCopyPaste'\n  | 'enableCellDragAndDrop'\n  | 'cellNavigationMode'\n  | 'editorPortalTarget'\n  | 'onCheckCellIsEditable'\n  | 'onSelectedCellChange'\n  | 'onSelectedCellRangeChange'\n  | 'onRowsUpdate'\n> & Pick<ColumnMetrics<R, SR>, 'columns'>;\n\ninterface SelectCellState extends Position {\n  status: 'SELECT';\n}\n\ninterface EditCellState extends Position {\n  status: 'EDIT';\n  key: string | null;\n}\n\nexport interface InteractionMasksProps<R, SR> extends SharedCanvasProps<R, SR> {\n  height: number;\n  canvasRef: React.RefObject<HTMLDivElement>;\n  scrollLeft: number;\n  scrollTop: number;\n  eventBus: EventBus;\n  scrollToCell: (cell: Position) => void;\n}\n\nexport default function InteractionMasks<R, SR>({\n  columns,\n  rows,\n  rowHeight,\n  eventBus,\n  enableCellAutoFocus,\n  enableCellCopyPaste,\n  enableCellDragAndDrop,\n  editorPortalTarget,\n  cellNavigationMode,\n  canvasRef,\n  scrollLeft,\n  scrollTop,\n  onSelectedCellChange,\n  onCheckCellIsEditable,\n  onRowsUpdate,\n  scrollToCell\n}: InteractionMasksProps<R, SR>) {\n  const [selectedPosition, setSelectedPosition] = useState<SelectCellState | EditCellState>(() => {\n    if (enableCellAutoFocus && document.activeElement === document.body && columns.length > 0 && rows.length > 0) {\n      return { idx: 0, rowIdx: 0, status: 'SELECT' };\n    }\n    return { idx: -1, rowIdx: -1, status: 'SELECT' };\n  });\n  const [copiedPosition, setCopiedPosition] = useState<Position & { value: unknown } | null>(null);\n  const [draggedPosition, setDraggedPosition] = useState<DraggedPosition | null>(null);\n  const selectionMaskRef = useRef<HTMLDivElement>(null);\n\n  // Focus on the selection mask when the selected position is changed or the editor is closed\n  useEffect(() => {\n    if (selectedPosition.rowIdx === -1 || selectedPosition.idx === -1 || selectedPosition.status === 'EDIT') return;\n    selectionMaskRef.current?.focus();\n  }, [selectedPosition]);\n\n  useEffect(() => {\n    return eventBus.subscribe('SELECT_CELL', selectCell);\n  });\n\n  useEffect(() => {\n    if (draggedPosition === null) return;\n    const handleDragEnter = (overRowIdx: number) => {\n      setDraggedPosition({ ...draggedPosition, overRowIdx });\n    };\n    return eventBus.subscribe('DRAG_ENTER', handleDragEnter);\n  }, [draggedPosition, eventBus]);\n\n  const closeEditor = useCallback(() => {\n    setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, status: 'SELECT' }));\n  }, []);\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > columns.length || selectedPosition.rowIdx > rows.length) {\n    setSelectedPosition({ idx: -1, rowIdx: -1, status: 'SELECT' });\n    setCopiedPosition(null);\n    setDraggedPosition(null);\n  }\n\n  function getEditorPosition() {\n    if (!canvasRef.current) return null;\n    const { left, top } = canvasRef.current.getBoundingClientRect();\n    const { scrollTop: docTop, scrollLeft: docLeft } = document.scrollingElement || document.documentElement;\n    const column = columns[selectedPosition.idx];\n    return {\n      left: left + docLeft + column.left - (column.frozen ? 0 : scrollLeft),\n      top: top + docTop + selectedPosition.rowIdx * rowHeight - scrollTop\n    };\n  }\n\n  function getNextPosition(key: string, mode = cellNavigationMode, shiftKey = false) {\n    const { idx, rowIdx } = selectedPosition;\n    let nextPosition: Position;\n    switch (key) {\n      case 'ArrowUp':\n        nextPosition = { idx, rowIdx: rowIdx - 1 };\n        break;\n      case 'ArrowDown':\n        nextPosition = { idx, rowIdx: rowIdx + 1 };\n        break;\n      case 'ArrowLeft':\n        nextPosition = { idx: idx - 1, rowIdx };\n        break;\n      case 'ArrowRight':\n        nextPosition = { idx: idx + 1, rowIdx };\n        break;\n      case 'Tab':\n        nextPosition = { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n        break;\n      default:\n        nextPosition = { idx, rowIdx };\n        break;\n    }\n\n    return getNextSelectedCellPosition<R, SR>({\n      columns,\n      rowsCount: rows.length,\n      cellNavigationMode: mode,\n      nextPosition\n    });\n  }\n\n  function onKeyDown(event: React.KeyboardEvent<HTMLDivElement>): void {\n    const column = columns[selectedPosition.idx];\n    const row = rows[selectedPosition.rowIdx];\n    const isActivatedByUser = (column.unsafe_onCellInput ?? legacyCellInput)(event, row) === true;\n\n    const { key } = event;\n    if (enableCellCopyPaste && isCtrlKeyHeldDown(event)) {\n      // event.key may be uppercase `C` or `V`\n      const lowerCaseKey = event.key.toLowerCase();\n      if (lowerCaseKey === 'c') return handleCopy();\n      if (lowerCaseKey === 'v') return handlePaste();\n    }\n\n    const canOpenEditor = selectedPosition.status === 'SELECT' && isCellEditable(selectedPosition);\n\n    switch (key) {\n      case 'Enter':\n        if (canOpenEditor) {\n          setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, status: 'EDIT', key: 'Enter' }));\n        } else if (selectedPosition.status === 'EDIT') {\n          setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, status: 'SELECT' }));\n        }\n        break;\n      case 'Escape':\n        closeEditor();\n        setCopiedPosition(null);\n        break;\n      case 'Tab':\n        onPressTab(event);\n        break;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n        event.preventDefault();\n        selectCell(getNextPosition(key));\n        break;\n      default:\n        if (canOpenEditor && isActivatedByUser) {\n          setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, status: 'EDIT', key }));\n        }\n        break;\n    }\n  }\n\n  function onPressTab(e: React.KeyboardEvent<HTMLDivElement>): void {\n    // If we are in a position to leave the grid, stop editing but stay in that cell\n    if (canExitGrid(e, { cellNavigationMode, columns, rowsCount: rows.length, selectedPosition })) {\n      if (selectedPosition.status === 'EDIT') {\n        closeEditor();\n        return;\n      }\n\n      // Reset the selected position before exiting\n      setSelectedPosition({ idx: -1, rowIdx: -1, status: 'SELECT' });\n      return;\n    }\n\n    e.preventDefault();\n    const tabCellNavigationMode = cellNavigationMode === CellNavigationMode.NONE\n      ? CellNavigationMode.CHANGE_ROW\n      : cellNavigationMode;\n    const nextPosition = getNextPosition('Tab', tabCellNavigationMode, e.shiftKey);\n    selectCell(nextPosition);\n  }\n\n  function handleCopy(): void {\n    const { idx, rowIdx } = selectedPosition;\n    const value = rows[rowIdx][columns[idx].key as keyof R];\n    setCopiedPosition({ idx, rowIdx, value });\n  }\n\n  function handlePaste(): void {\n    if (copiedPosition === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const { rowIdx: toRow } = selectedPosition;\n\n    const cellKey = columns[selectedPosition.idx].key;\n    const { rowIdx: fromRow, idx, value } = copiedPosition;\n    const fromCellKey = columns[idx].key;\n\n    onRowsUpdate({\n      cellKey,\n      fromRow,\n      toRow,\n      updated: { [cellKey]: value } as never,\n      action: UpdateActions.COPY_PASTE,\n      fromCellKey\n    });\n  }\n\n  function isCellWithinBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= 0 && rowIdx < rows.length && idx >= 0 && idx < columns.length;\n  }\n\n  function isCellEditable(position: Position) {\n    return isCellWithinBounds(position)\n      && isSelectedCellEditable<R, SR>({ columns, rows, selectedPosition: position, onCheckCellIsEditable });\n  }\n\n  function selectCell(position: Position, enableEditor = false): void {\n    if (!isCellWithinBounds(position)) return;\n\n    if (enableEditor && isCellEditable(position)) {\n      setSelectedPosition({ ...position, status: 'EDIT', key: null });\n    } else {\n      setSelectedPosition({ ...position, status: 'SELECT' });\n    }\n    scrollToCell(position);\n    onSelectedCellChange?.({ ...position });\n  }\n\n  function isDragEnabled(): boolean {\n    return enableCellDragAndDrop && isCellEditable(selectedPosition);\n  }\n\n  function handleDragStart(e: React.DragEvent<HTMLDivElement>): void {\n    e.dataTransfer.effectAllowed = 'copy';\n    // Setting data is required to make an element draggable in FF\n    const transferData = JSON.stringify(selectedPosition);\n    try {\n      e.dataTransfer.setData('text/plain', transferData);\n    } catch (ex) {\n      // IE only supports 'text' and 'URL' for the 'type' argument\n      e.dataTransfer.setData('text', transferData);\n    }\n    setDraggedPosition({ ...selectedPosition, overRowIdx: selectedPosition.rowIdx });\n  }\n\n  function handleDragEnd() {\n    if (draggedPosition === null) return;\n\n    const { rowIdx, overRowIdx } = draggedPosition;\n    const column = columns[draggedPosition.idx];\n    const cellKey = column.key;\n    const value = rows[rowIdx][cellKey as keyof R];\n\n    onRowsUpdate({\n      cellKey,\n      fromRow: rowIdx,\n      toRow: overRowIdx,\n      updated: { [cellKey]: value } as never,\n      action: UpdateActions.CELL_DRAG\n    });\n\n    setDraggedPosition(null);\n  }\n\n  function onDragHandleDoubleClick(): void {\n    const column = columns[selectedPosition.idx];\n    const cellKey = column.key;\n    const value = rows[selectedPosition.rowIdx][cellKey as keyof R];\n\n    onRowsUpdate({\n      cellKey,\n      fromRow: selectedPosition.rowIdx,\n      toRow: rows.length - 1,\n      updated: { [cellKey]: value } as never,\n      action: UpdateActions.COLUMN_FILL\n    });\n  }\n\n  function onCommit({ cellKey, rowIdx, updated }: CommitEvent): void {\n    onRowsUpdate({\n      cellKey,\n      fromRow: rowIdx,\n      toRow: rowIdx,\n      updated,\n      action: UpdateActions.CELL_UPDATE\n    });\n    closeEditor();\n  }\n\n  function getSelectedDimensions(selectedPosition: Position): Dimension {\n    const top = rowHeight * selectedPosition.rowIdx;\n    const dimension = getDimensions({ selectedPosition, columns, scrollLeft, rowHeight });\n    dimension.top = top;\n    return dimension;\n  }\n\n  return (\n    <div onKeyDown={onKeyDown}>\n      {copiedPosition && isCellWithinBounds(copiedPosition) && (\n        <CellMask\n          className=\"rdg-cell-copied\"\n          {...getSelectedDimensions(copiedPosition)}\n        />\n      )}\n      {draggedPosition && isCellWithinBounds(draggedPosition) && (\n        <DragMask\n          draggedPosition={draggedPosition}\n          getSelectedDimensions={getSelectedDimensions}\n        />\n      )}\n      {selectedPosition.status === 'SELECT' && isCellWithinBounds(selectedPosition) && (\n        <CellMask\n          className=\"rdg-selected\"\n          tabIndex={0}\n          ref={selectionMaskRef}\n          {...getSelectedDimensions(selectedPosition)}\n        >\n          {isDragEnabled() && (\n            <div\n              className=\"drag-handle\"\n              draggable\n              onDragStart={handleDragStart}\n              onDragEnd={handleDragEnd}\n              onDoubleClick={onDragHandleDoubleClick}\n            />\n          )}\n        </CellMask>\n      )}\n      {selectedPosition.status === 'EDIT' && isCellWithinBounds(selectedPosition) && (\n        <EditorPortal target={editorPortalTarget}>\n          <EditorContainer<R, SR>\n            firstEditorKeyPress={selectedPosition.key}\n            onCommit={onCommit}\n            onCommitCancel={closeEditor}\n            rowIdx={selectedPosition.rowIdx}\n            row={rows[selectedPosition.rowIdx]}\n            column={columns[selectedPosition.idx]}\n            scrollLeft={scrollLeft}\n            scrollTop={scrollTop}\n            {...getSelectedDimensions(selectedPosition)}\n            {...getEditorPosition()}\n          />\n        </EditorPortal>\n      )}\n    </div>\n  );\n}\n"]}