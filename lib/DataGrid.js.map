{"version":3,"file":"DataGrid.js","sourceRoot":"","sources":["../src/DataGrid.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, {\n  forwardRef,\n  useState,\n  useRef,\n  useLayoutEffect,\n  useMemo,\n  createElement\n} from 'react';\n\nimport HeaderRow from './HeaderRow';\nimport FilterRow from './FilterRow';\nimport Canvas, { CanvasHandle as DataGridHandle } from './Canvas';\nimport { ValueFormatter } from './formatters';\nimport { getColumnMetrics, getHorizontalRangeToRender, isPositionStickySupported, getViewportColumns, getScrollbarSize } from './utils';\nimport { CellNavigationMode, SortDirection } from './common/enums';\nimport {\n  CalculatedColumn,\n  CheckCellIsEditableEvent,\n  Column,\n  RowsUpdateEvent,\n  Position,\n  RowExpandToggleEvent,\n  SelectedRange,\n  RowRendererProps,\n  ScrollPosition,\n  Filters,\n  FormatterProps\n} from './common/types';\n\nexport { DataGridHandle };\n\nexport interface DataGridProps<R, K extends keyof R, SR = unknown> {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   * Bottom horizontal scroll bar can move the row left / right. Or a customized row renderer can be used to disabled the scrolling support.\n   */\n  summaryRows?: readonly SR[];\n  /** The primary key property of each row */\n  rowKey?: K;\n  /**\n   * Callback called whenever row data is updated\n   * When editing is enabled, this callback will be called for the following scenarios\n   * 1. Using the supplied editor of the column. The default editor is the SimpleTextEditor.\n   * 2. Copy/pasting the value from one cell to another <kbd>CTRL</kbd>+<kbd>C</kbd>, <kbd>CTRL</kbd>+<kbd>V</kbd>\n   * 3. Update multiple cells by dragging the fill handle of a cell up or down to a destination cell.\n   * 4. Update all cells under a given cell by double clicking the cell's fill handle.\n   */\n  onRowsUpdate?: <E extends RowsUpdateEvent>(event: E) => void;\n\n  /**\n   * Dimensions props\n   */\n  /** The width of the grid in pixels */\n  width?: number;\n  /** The height of the grid in pixels */\n  height?: number;\n  /** Minimum column width in pixels */\n  minColumnWidth?: number;\n  /** The height of each row in pixels */\n  rowHeight?: number;\n  /** The height of the header row in pixels */\n  headerRowHeight?: number;\n  /** The height of the header filter row in pixels */\n  headerFiltersHeight?: number;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: ReadonlySet<R[K]>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: (selectedRows: Set<R[K]>) => void;\n  /** The key of the column which is currently being sorted */\n  sortColumn?: string;\n  /** The direction to sort the sortColumn*/\n  sortDirection?: SortDirection;\n  /** Function called whenever grid is sorted*/\n  onSort?: (columnKey: string, direction: SortDirection) => void;\n  filters?: Filters;\n  onFiltersChange?: (filters: Filters) => void;\n\n  /**\n   * Custom renderers\n   */\n  defaultFormatter?: React.ComponentType<FormatterProps<R, SR>>;\n  rowRenderer?: React.ComponentType<RowRendererProps<R, SR>>;\n  rowGroupRenderer?: React.ComponentType;\n  emptyRowsView?: React.ComponentType<{}>;\n  /** Component used to render a draggable header cell */\n  draggableHeaderCell?: React.ComponentType<{ column: CalculatedColumn<R, SR>; onHeaderDrop: () => void }>;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a row is clicked */\n  onRowClick?: (rowIdx: number, row: R, column: CalculatedColumn<R, SR>) => void;\n  /** Called when the grid is scrolled */\n  onScroll?: (scrollPosition: ScrollPosition) => void;\n  /** Called when a column is resized */\n  onColumnResize?: (idx: number, width: number) => void;\n  onHeaderDrop?: () => void;\n  onRowExpandToggle?: (event: RowExpandToggleEvent) => void;\n  /** Function called whenever selected cell is changed */\n  onSelectedCellChange?: (position: Position) => void;\n  /** Function called whenever selected cell range is changed */\n  onSelectedCellRangeChange?: (selectedRange: SelectedRange) => void;\n  /** called before cell is set active, returns a boolean to determine whether cell is editable */\n  onCheckCellIsEditable?: (event: CheckCellIsEditableEvent<R, SR>) => boolean;\n\n  /**\n   * Toggles and modes\n   */\n  /** Toggles whether filters row is displayed or not */\n  enableFilters?: boolean;\n  /** Toggles whether cells should be autofocused */\n  enableCellAutoFocus?: boolean;\n  enableCellCopyPaste?: boolean;\n  enableCellDragAndDrop?: boolean;\n  cellNavigationMode?: CellNavigationMode;\n\n  /**\n   * Miscellaneous\n   */\n  /** The node where the editor portal should mount. */\n  editorPortalTarget?: Element;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n*/\nfunction DataGrid<R, K extends keyof R, SR>({\n  rowKey,\n  rowHeight = 35,\n  headerRowHeight = rowHeight,\n  headerFiltersHeight = 45,\n  minColumnWidth = 80,\n  height = 350,\n  width,\n  enableCellAutoFocus = true,\n  enableFilters = false,\n  enableCellCopyPaste = false,\n  enableCellDragAndDrop = false,\n  cellNavigationMode = CellNavigationMode.NONE,\n  editorPortalTarget = document.body,\n  defaultFormatter = ValueFormatter,\n  columns,\n  rows,\n  selectedRows,\n  onSelectedRowsChange,\n  ...props\n}: DataGridProps<R, K, SR>, ref: React.Ref<DataGridHandle>) {\n  const [columnWidths, setColumnWidths] = useState<ReadonlyMap<string, number>>(() => new Map());\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [gridWidth, setGridWidth] = useState(0);\n  const gridRef = useRef<HTMLDivElement>(null);\n  const headerRef = useRef<HTMLDivElement>(null);\n  const viewportWidth = (width || gridWidth) - 2; // 2 for border width;\n  const nonStickyScrollLeft = isPositionStickySupported() ? undefined : scrollLeft;\n\n  const columnMetrics = useMemo(() => {\n    if (viewportWidth <= 0) return null;\n\n    return getColumnMetrics<R, SR>({\n      columns,\n      minColumnWidth,\n      viewportWidth,\n      columnWidths,\n      defaultFormatter\n    });\n  }, [columnWidths, columns, defaultFormatter, minColumnWidth, viewportWidth]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!columnMetrics) {\n      return [0, 0];\n    }\n\n    return getHorizontalRangeToRender({\n      columnMetrics,\n      scrollLeft\n    });\n  }, [columnMetrics, scrollLeft]);\n\n  const viewportColumns = useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    if (!columnMetrics) return [];\n\n    return getViewportColumns(\n      columnMetrics.columns,\n      colOverscanStartIdx,\n      colOverscanEndIdx\n    );\n  }, [colOverscanEndIdx, colOverscanStartIdx, columnMetrics]);\n\n  useLayoutEffect(() => {\n    // Do not calculate the width if width is provided\n    if (width) return;\n    function onResize() {\n      // Immediately re-render when the component is mounted to get valid columnMetrics.\n      setGridWidth(gridRef.current!.getBoundingClientRect().width);\n    }\n    onResize();\n\n    window.addEventListener('resize', onResize);\n    return () => {\n      window.removeEventListener('resize', onResize);\n    };\n  }, [width]);\n\n  function handleColumnResize(column: CalculatedColumn<R, SR>, width: number) {\n    const newColumnWidths = new Map(columnWidths);\n    newColumnWidths.set(column.key, width);\n    setColumnWidths(newColumnWidths);\n\n    props.onColumnResize?.(column.idx, width);\n  }\n\n  function handleScroll(scrollPosition: ScrollPosition) {\n    if (headerRef.current) {\n      headerRef.current.scrollLeft = scrollPosition.scrollLeft;\n    }\n    setScrollLeft(scrollPosition.scrollLeft);\n    props.onScroll?.(scrollPosition);\n  }\n\n  function handleRowUpdate(event: RowsUpdateEvent) {\n    props.onRowsUpdate?.(event);\n  }\n\n  const rowOffsetHeight = headerRowHeight + (enableFilters ? headerFiltersHeight : 0);\n\n  return (\n    <div\n      className=\"rdg-root\"\n      style={{ width, lineHeight: `${rowHeight}px` }}\n      ref={gridRef}\n    >\n      {columnMetrics && (\n        <>\n          <div\n            ref={headerRef}\n            className=\"rdg-header\"\n          >\n            <HeaderRow<R, K, SR>\n              rowKey={rowKey}\n              rows={rows}\n              height={headerRowHeight}\n              width={columnMetrics.totalColumnWidth + getScrollbarSize()}\n              columns={viewportColumns}\n              onColumnResize={handleColumnResize}\n              lastFrozenColumnIndex={columnMetrics.lastFrozenColumnIndex}\n              draggableHeaderCell={props.draggableHeaderCell}\n              onHeaderDrop={props.onHeaderDrop}\n              allRowsSelected={selectedRows?.size === rows.length}\n              onSelectedRowsChange={onSelectedRowsChange}\n              sortColumn={props.sortColumn}\n              sortDirection={props.sortDirection}\n              onSort={props.onSort}\n              scrollLeft={nonStickyScrollLeft}\n            />\n            {enableFilters && (\n              <FilterRow<R, SR>\n                height={headerFiltersHeight}\n                width={columnMetrics.totalColumnWidth + getScrollbarSize()}\n                lastFrozenColumnIndex={columnMetrics.lastFrozenColumnIndex}\n                columns={viewportColumns}\n                scrollLeft={nonStickyScrollLeft}\n                filters={props.filters}\n                onFiltersChange={props.onFiltersChange}\n              />\n            )}\n          </div>\n          {rows.length === 0 && props.emptyRowsView ? createElement(props.emptyRowsView) : (\n            <Canvas<R, K, SR>\n              ref={ref}\n              rowKey={rowKey}\n              rowHeight={rowHeight}\n              rowRenderer={props.rowRenderer}\n              rows={rows}\n              selectedRows={selectedRows}\n              onSelectedRowsChange={onSelectedRowsChange}\n              columnMetrics={columnMetrics}\n              viewportColumns={viewportColumns}\n              onScroll={handleScroll}\n              height={height - rowOffsetHeight}\n              rowGroupRenderer={props.rowGroupRenderer}\n              enableCellAutoFocus={enableCellAutoFocus}\n              enableCellCopyPaste={enableCellCopyPaste}\n              enableCellDragAndDrop={enableCellDragAndDrop}\n              cellNavigationMode={cellNavigationMode}\n              scrollLeft={scrollLeft}\n              editorPortalTarget={editorPortalTarget}\n              summaryRows={props.summaryRows}\n              onCheckCellIsEditable={props.onCheckCellIsEditable}\n              onRowsUpdate={handleRowUpdate}\n              onSelectedCellChange={props.onSelectedCellChange}\n              onSelectedCellRangeChange={props.onSelectedCellRangeChange}\n              onRowClick={props.onRowClick}\n              onRowExpandToggle={props.onRowExpandToggle}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default forwardRef(\n  DataGrid as React.RefForwardingComponent<DataGridHandle>\n) as <R, K extends keyof R, SR = unknown>(props: DataGridProps<R, K, SR> & { ref?: React.Ref<DataGridHandle> }) => JSX.Element;\n"]}