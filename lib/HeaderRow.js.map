{"version":3,"file":"HeaderRow.js","sourceRoot":"","sources":["../src/HeaderRow.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,EAAE,EAAE,WAAW,EAAE,MAAM,OAAO,CAAC;AAE3C,OAAO,UAAU,MAAM,cAAc,CAAC;AAEtC,OAAO,EAAE,gBAAgB,EAAE,MAAM,SAAS,CAAC;AAwB3C,MAAM,CAAC,OAAO,UAAU,SAAS,CAA2B,EAOjC;IANzB,IAAA,kBAAM,EACN,gBAAK,EACL,8CAAoB,EACpB,kBAAM,EACN,cAAI,EACJ,iFAAQ;IAER,IAAM,4BAA4B,GAAG,WAAW,CAAC,UAAC,OAAgB;;QAChE,IAAI,CAAC,oBAAoB;YAAE,OAAO;QAElC,gBAAgB,CAAC,MAAM,CAAC,CAAC;QAEzB,IAAM,eAAe,GAAG,IAAI,GAAG,EAAQ,CAAC;QACxC,IAAI,OAAO,EAAE;;gBACX,KAAkB,IAAA,SAAA,SAAA,IAAI,CAAA,0BAAA,4CAAE;oBAAnB,IAAM,GAAG,iBAAA;oBACZ,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;iBAClC;;;;;;;;;SACF;QAED,oBAAoB,CAAC,eAAe,CAAC,CAAC;IACxC,CAAC,EAAE,CAAC,oBAAoB,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;IAEzC,OAAO,CACL,6BACE,SAAS,EAAC,gBAAgB,EAC1B,KAAK,EAAE,EAAE,KAAK,OAAA,EAAE,MAAM,QAAA,EAAE,UAAU,EAAK,MAAM,OAAI,EAAE,IAElD,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM;QACvB,OAAO,CACL,oBAAC,UAAU,IACT,GAAG,EAAE,MAAM,CAAC,GAAG,EACf,MAAM,EAAE,MAAM,EACd,qBAAqB,EAAE,KAAK,CAAC,qBAAqB,EAClD,MAAM,EAAE,MAAM,EACd,QAAQ,EAAE,KAAK,CAAC,cAAc,EAC9B,YAAY,EAAE,KAAK,CAAC,YAAY,EAChC,eAAe,EAAE,KAAK,CAAC,eAAe,EACtC,wBAAwB,EAAE,4BAA4B,EACtD,mBAAmB,EAAE,KAAK,CAAC,mBAAmB,EAC9C,MAAM,EAAE,KAAK,CAAC,MAAM,EACpB,UAAU,EAAE,KAAK,CAAC,UAAU,EAC5B,aAAa,EAAE,KAAK,CAAC,aAAa,EAClC,UAAU,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,GACxD,CACH,CAAC;IACJ,CAAC,CAAC,CACE,CACP,CAAC;AACJ,CAAC","sourcesContent":["import React, { useCallback } from 'react';\n\nimport HeaderCell from './HeaderCell';\nimport { CalculatedColumn } from './common/types';\nimport { assertIsValidKey } from './utils';\nimport { DataGridProps } from './DataGrid';\n\ntype SharedDataGridProps<R, K extends keyof R, SR> = Pick<DataGridProps<R, K, SR>,\n  | 'draggableHeaderCell'\n  | 'rows'\n  | 'onHeaderDrop'\n  | 'onSelectedRowsChange'\n  | 'sortColumn'\n  | 'sortDirection'\n  | 'onSort'\n  | 'rowKey'\n>;\n\nexport interface HeaderRowProps<R, K extends keyof R, SR> extends SharedDataGridProps<R, K, SR> {\n  height: number;\n  width: number;\n  lastFrozenColumnIndex: number;\n  columns: readonly CalculatedColumn<R, SR>[];\n  allRowsSelected: boolean;\n  scrollLeft: number | undefined;\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number) => void;\n}\n\nexport default function HeaderRow<R, K extends keyof R, SR>({\n  height,\n  width,\n  onSelectedRowsChange,\n  rowKey,\n  rows,\n  ...props\n}: HeaderRowProps<R, K, SR>) {\n  const handleAllRowsSelectionChange = useCallback((checked: boolean) => {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKey(rowKey);\n\n    const newSelectedRows = new Set<R[K]>();\n    if (checked) {\n      for (const row of rows) {\n        newSelectedRows.add(row[rowKey]);\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }, [onSelectedRowsChange, rows, rowKey]);\n\n  return (\n    <div\n      className=\"rdg-header-row\"\n      style={{ width, height, lineHeight: `${height}px` }}\n    >\n      {props.columns.map(column => {\n        return (\n          <HeaderCell<R, SR>\n            key={column.key}\n            column={column}\n            lastFrozenColumnIndex={props.lastFrozenColumnIndex}\n            height={height}\n            onResize={props.onColumnResize}\n            onHeaderDrop={props.onHeaderDrop}\n            allRowsSelected={props.allRowsSelected}\n            onAllRowsSelectionChange={handleAllRowsSelectionChange}\n            draggableHeaderCell={props.draggableHeaderCell}\n            onSort={props.onSort}\n            sortColumn={props.sortColumn}\n            sortDirection={props.sortDirection}\n            scrollLeft={column.frozen ? props.scrollLeft : undefined}\n          />\n        );\n      })}\n    </div>\n  );\n}\n"]}