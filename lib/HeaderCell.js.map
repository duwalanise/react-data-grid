{"version":3,"file":"HeaderCell.js","sourceRoot":"","sources":["../src/HeaderCell.tsx"],"names":[],"mappings":";;;;;;;;;;;AAAA,OAAO,KAAK,EAAE,EAAE,aAAa,EAAE,MAAM,OAAO,CAAC;AAC7C,OAAO,UAAU,MAAM,YAAY,CAAC;AAIpC,OAAO,kBAAkB,MAAM,kCAAkC,CAAC;AAClE,OAAO,mBAAmB,MAAM,mCAAmC,CAAC;AAoBpE,MAAM,CAAC,OAAO,UAAU,UAAU,CAAQ,EAOjB;IANvB,IAAA,kBAAM,EACN,kBAAM,EACN,oCAAe,EACf,sDAAwB,EACxB,0BAAU,EACV,qGAAQ;IAER,SAAS,OAAO;QACd,IAAI,CAAC,MAAM,CAAC,cAAc;YAAE,OAAO,MAAM,CAAC,IAAI,CAAC;QAE/C,OAAO,aAAa,CAAC,MAAM,CAAC,cAAc,EAAE,EAAE,MAAM,QAAA,EAAE,eAAe,iBAAA,EAAE,wBAAwB,0BAAA,EAAE,CAAC,CAAC;IACrG,CAAC;IAED,IAAI,IAAI,GAAG,OAAO,EAAE,CAAC;IAErB,IAAI,MAAM,CAAC,QAAQ,EAAE;QACnB,IAAI,GAAG,CACL,oBAAC,kBAAkB,IACjB,MAAM,EAAE,MAAM,EACd,MAAM,EAAE,KAAK,CAAC,MAAM,EACpB,UAAU,EAAE,KAAK,CAAC,UAAU,EAC5B,aAAa,EAAE,KAAK,CAAC,aAAa,IAEjC,IAAI,CACc,CACtB,CAAC;KACH;IAED,IAAM,SAAS,GAAG,UAAU,CAAC,UAAU,EAAE,MAAM,CAAC,eAAe,EAAE;QAC/D,iBAAiB,EAAE,MAAM,CAAC,MAAM;QAChC,sBAAsB,EAAE,MAAM,CAAC,GAAG,KAAK,KAAK,CAAC,qBAAqB;KACnE,CAAC,CAAC;IACH,IAAM,KAAK,GAAwB;QACjC,KAAK,EAAE,MAAM,CAAC,KAAK;QACnB,IAAI,EAAE,MAAM,CAAC,IAAI;KAClB,CAAC;IAEF,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;QAClC,KAAK,CAAC,SAAS,GAAG,gBAAc,UAAU,QAAK,CAAC;KACjD;IAED,IAAI,GAAG,CACL,6BACE,SAAS,EAAE,SAAS,EACpB,KAAK,EAAE,KAAK,IAEX,IAAI,CACD,CACP,CAAC;IAEF,IAAI,MAAM,CAAC,SAAS,EAAE;QACpB,IAAI,GAAG,CACL,oBAAC,mBAAmB,IAClB,MAAM,EAAE,MAAM,EACd,QAAQ,EAAE,KAAK,CAAC,QAAQ,IAEvB,IAAuD,CACpC,CACvB,CAAC;KACH;IAED,IAAM,mBAAmB,GAAG,KAAK,CAAC,mBAAmB,CAAC;IACtD,IAAI,MAAM,CAAC,SAAS,IAAI,mBAAmB,EAAE;QAC3C,OAAO,CACL,oBAAC,mBAAmB,IAClB,MAAM,EAAE,MAAM,EACd,YAAY,EAAE,KAAK,CAAC,YAAa,IAEhC,IAAI,CACe,CACvB,CAAC;KACH;IAED,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import React, { createElement } from 'react';\nimport classNames from 'classnames';\n\nimport { CalculatedColumn } from './common/types';\nimport { HeaderRowProps } from './HeaderRow';\nimport SortableHeaderCell from './headerCells/SortableHeaderCell';\nimport ResizableHeaderCell from './headerCells/ResizableHeaderCell';\n\ntype SharedHeaderRowProps<R, SR> = Pick<HeaderRowProps<R, never, SR>,\n  | 'sortColumn'\n  | 'sortDirection'\n  | 'onSort'\n  | 'height'\n  | 'onHeaderDrop'\n  | 'allRowsSelected'\n  | 'draggableHeaderCell'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  lastFrozenColumnIndex: number;\n  scrollLeft: number | undefined;\n  onResize: (column: CalculatedColumn<R, SR>, width: number) => void;\n  onAllRowsSelectionChange: (checked: boolean) => void;\n}\n\nexport default function HeaderCell<R, SR>({\n  height,\n  column,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  scrollLeft,\n  ...props\n}: HeaderCellProps<R, SR>) {\n  function getCell() {\n    if (!column.headerRenderer) return column.name;\n\n    return createElement(column.headerRenderer, { column, allRowsSelected, onAllRowsSelectionChange });\n  }\n\n  let cell = getCell();\n\n  if (column.sortable) {\n    cell = (\n      <SortableHeaderCell\n        column={column}\n        onSort={props.onSort}\n        sortColumn={props.sortColumn}\n        sortDirection={props.sortDirection}\n      >\n        {cell}\n      </SortableHeaderCell>\n    );\n  }\n\n  const className = classNames('rdg-cell', column.headerCellClass, {\n    'rdg-cell-frozen': column.frozen,\n    'rdg-cell-frozen-last': column.idx === props.lastFrozenColumnIndex\n  });\n  const style: React.CSSProperties = {\n    width: column.width,\n    left: column.left\n  };\n\n  if (typeof scrollLeft === 'number') {\n    style.transform = `translateX(${scrollLeft}px)`;\n  }\n\n  cell = (\n    <div\n      className={className}\n      style={style}\n    >\n      {cell}\n    </div>\n  );\n\n  if (column.resizable) {\n    cell = (\n      <ResizableHeaderCell\n        column={column}\n        onResize={props.onResize}\n      >\n        {cell as React.ReactElement<React.ComponentProps<'div'>>}\n      </ResizableHeaderCell>\n    );\n  }\n\n  const DraggableHeaderCell = props.draggableHeaderCell;\n  if (column.draggable && DraggableHeaderCell) {\n    return (\n      <DraggableHeaderCell\n        column={column}\n        onHeaderDrop={props.onHeaderDrop!}\n      >\n        {cell}\n      </DraggableHeaderCell>\n    );\n  }\n\n  return cell;\n}\n"]}